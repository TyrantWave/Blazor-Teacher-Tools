@page "/"
@using Newtonsoft.Json;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container-fluid">
    <div class="row">   
        <h1 class="col flex-fill">
            Phrase Chooser
        </h1> 
    </div>

    <div class="row">
        <div class="col ">
            <div class="jumbotron">
                <h1 class="display-3 text-primary">@CurrentPhrase</h1>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <button type="button" style="width: 200px;" class="btn btn-primary btn-large mx-auto" 
                @onclick="NewPhrase">
            New Phrase
        </button>
    </div>
    <hr class="my-3">
    <div class="row">
        <div class="col">
            <textarea class="form-control my-2" style="min-height: 200px;" aria-label="Phrases go here, one per line" 
                      @bind="PhraseBox">
            </textarea>
        </div>
    </div>
    <div class="form-row mb-3">
        <div class="col">
            <input type="text" class="col form-control flex-fill" aria-label="List Items" @bind="SaveTitle" />
        </div>
        <div class="col-auto">
            <button type="button" class="col-auto btn btn-success mx-1" @onclick="SaveList">Save</button>
        </div>
        <div class="col-auto">
            <button type="button" class="col-auto btn btn-secondary" @onclick="ClearList">Clear</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="card-columns">
    @foreach (var item in storedLists.Keys)
    {
                <div class='card @(item == SaveTitle ? "border-primary" : "border-secondary")' @onclick="(() => LoadList(item))">
                    <div class='card-header  @(item == SaveTitle ? "text-white bg-primary" : "bg-secondary")'>
                        <h4 class="card-title">
                            @item
                            <a role="button" class="btn btn-outline-danger btn-sm float-right" @onclick="(() => DeleteList(item))">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </a>
                        </h4>
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var p in storedLists[item].Take(5))
                        {
                            <li class="list-group-item">@p</li>
                        }
                    </ul>
                </div>  
    }
            </div>
        </div>
    </div>
</div>

@code {
    List<string> phrases;
    Random rand = new Random();

    string CurrentPhrase = " ";
    string phraseBox = "";
    string PhraseBox
    {
        set
        {
            phraseBox = value;
            phrases = phraseBox.Split('\n').ToList();
        }
        get
        {
            return phraseBox;
        }
    }
    bool IsHelpOpen { get; set; }

    string SaveTitle = "";
    Dictionary<string, List<string>> storedLists = new Dictionary<string, List<string>>();

    protected override async Task OnInitializedAsync()
    {
        var fromLocal = await localStorage.GetItemAsync<string>("phraseLists");
        if (fromLocal != null) {
            storedLists = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(fromLocal);
        }
    }

    void NewPhrase() 
    {
        var i = rand.Next(0, phrases.Count());
        CurrentPhrase = phrases[i];
        phrases.RemoveAt(i);
        PhraseBox = string.Join("\n", phrases);
    }

    void SaveList()
    {
        storedLists[SaveTitle] = phrases.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
        // After stripping whitespace, reload the list on save.
        LoadList(SaveTitle);
        var jsonLists = JsonConvert.SerializeObject(storedLists);
        localStorage.SetItemAsync("phraseLists", jsonLists);
    }

    void ClearList()
    {
        SaveTitle = "";
        PhraseBox = "";
        CurrentPhrase = " ";
    }

    void DeleteList(string key)
    {
        storedLists.Remove(key);
        var jsonLists = JsonConvert.SerializeObject(storedLists);
        localStorage.SetItemAsync("phraseLists", jsonLists);
    }

    void LoadList(string key)
    {
        phrases = storedLists[key];
        PhraseBox = string.Join("\n", phrases);
        SaveTitle = key;
    }
}